/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Usage as PrismaUsage,
  User as PrismaUser,
  AiService as PrismaAiService,
} from "@prisma/client";

export class UsageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UsageCountArgs, "select">): Promise<number> {
    return this.prisma.usage.count(args);
  }

  async usages(args: Prisma.UsageFindManyArgs): Promise<PrismaUsage[]> {
    return this.prisma.usage.findMany(args);
  }
  async usage(args: Prisma.UsageFindUniqueArgs): Promise<PrismaUsage | null> {
    return this.prisma.usage.findUnique(args);
  }
  async createUsage(args: Prisma.UsageCreateArgs): Promise<PrismaUsage> {
    return this.prisma.usage.create(args);
  }
  async updateUsage(args: Prisma.UsageUpdateArgs): Promise<PrismaUsage> {
    return this.prisma.usage.update(args);
  }
  async deleteUsage(args: Prisma.UsageDeleteArgs): Promise<PrismaUsage> {
    return this.prisma.usage.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.usage
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getAiService(parentId: string): Promise<PrismaAiService | null> {
    return this.prisma.usage
      .findUnique({
        where: { id: parentId },
      })
      .aiService();
  }
}
