/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AiServiceService } from "../aiService.service";
import { AiServiceCreateInput } from "./AiServiceCreateInput";
import { AiService } from "./AiService";
import { AiServiceFindManyArgs } from "./AiServiceFindManyArgs";
import { AiServiceWhereUniqueInput } from "./AiServiceWhereUniqueInput";
import { AiServiceUpdateInput } from "./AiServiceUpdateInput";
import { UsageFindManyArgs } from "../../usage/base/UsageFindManyArgs";
import { Usage } from "../../usage/base/Usage";
import { UsageWhereUniqueInput } from "../../usage/base/UsageWhereUniqueInput";

export class AiServiceControllerBase {
  constructor(protected readonly service: AiServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiService })
  async createAiService(
    @common.Body() data: AiServiceCreateInput
  ): Promise<AiService> {
    return await this.service.createAiService({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        price: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AiService] })
  @ApiNestedQuery(AiServiceFindManyArgs)
  async aiServices(@common.Req() request: Request): Promise<AiService[]> {
    const args = plainToClass(AiServiceFindManyArgs, request.query);
    return this.service.aiServices({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        price: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aiService(
    @common.Param() params: AiServiceWhereUniqueInput
  ): Promise<AiService | null> {
    const result = await this.service.aiService({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        price: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAiService(
    @common.Param() params: AiServiceWhereUniqueInput,
    @common.Body() data: AiServiceUpdateInput
  ): Promise<AiService | null> {
    try {
      return await this.service.updateAiService({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          price: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAiService(
    @common.Param() params: AiServiceWhereUniqueInput
  ): Promise<AiService | null> {
    try {
      return await this.service.deleteAiService({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          price: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/usages")
  @ApiNestedQuery(UsageFindManyArgs)
  async findUsages(
    @common.Req() request: Request,
    @common.Param() params: AiServiceWhereUniqueInput
  ): Promise<Usage[]> {
    const query = plainToClass(UsageFindManyArgs, request.query);
    const results = await this.service.findUsages(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        usageAmount: true,
        usageDate: true,

        user: {
          select: {
            id: true,
          },
        },

        aiService: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/usages")
  async connectUsages(
    @common.Param() params: AiServiceWhereUniqueInput,
    @common.Body() body: UsageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      usages: {
        connect: body,
      },
    };
    await this.service.updateAiService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/usages")
  async updateUsages(
    @common.Param() params: AiServiceWhereUniqueInput,
    @common.Body() body: UsageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      usages: {
        set: body,
      },
    };
    await this.service.updateAiService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/usages")
  async disconnectUsages(
    @common.Param() params: AiServiceWhereUniqueInput,
    @common.Body() body: UsageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      usages: {
        disconnect: body,
      },
    };
    await this.service.updateAiService({
      where: params,
      data,
      select: { id: true },
    });
  }
}
