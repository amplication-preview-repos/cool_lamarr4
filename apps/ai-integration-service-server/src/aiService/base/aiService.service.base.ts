/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AiService as PrismaAiService,
  Usage as PrismaUsage,
} from "@prisma/client";

export class AiServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiService.count(args);
  }

  async aiServices(
    args: Prisma.AiServiceFindManyArgs
  ): Promise<PrismaAiService[]> {
    return this.prisma.aiService.findMany(args);
  }
  async aiService(
    args: Prisma.AiServiceFindUniqueArgs
  ): Promise<PrismaAiService | null> {
    return this.prisma.aiService.findUnique(args);
  }
  async createAiService(
    args: Prisma.AiServiceCreateArgs
  ): Promise<PrismaAiService> {
    return this.prisma.aiService.create(args);
  }
  async updateAiService(
    args: Prisma.AiServiceUpdateArgs
  ): Promise<PrismaAiService> {
    return this.prisma.aiService.update(args);
  }
  async deleteAiService(
    args: Prisma.AiServiceDeleteArgs
  ): Promise<PrismaAiService> {
    return this.prisma.aiService.delete(args);
  }

  async findUsages(
    parentId: string,
    args: Prisma.UsageFindManyArgs
  ): Promise<PrismaUsage[]> {
    return this.prisma.aiService
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .usages(args);
  }
}
